// Cohen-Sutherland Line Clipping Algorithm - Nidhi, 1216
#include<graphics.h>
#include <conio.h>
#include<iostream.h>
typedef unsigned int outcode;
enum {TOP = 0x1, BOTTOM = 0x2, RIGHT = 0x4, LEFT = 0x8};

double xmin, ymin, xmax, ymax;

void drawLine(double x0, double y0, double x1, double y1)
{
	int max_x = getmaxx();
	int max_y = getmaxy();
	int max_x_2 = max_x / 2;
	int max_y_2 = max_y / 2;
	x0 = max_x_2 + x0;
	x1 = max_x_2 + x1;
	y0 = max_y_2 - y0;
	y1 = max_y_2 - y1;
	line(x0,y0,x1,y1);	
}

outcode computeOutcode(double x, double y)
{
	outcode code = 0;
	if(y > ymax)
		code |= TOP;
	else if(y < ymin)
		code |= BOTTOM;
	if(x > xmax)
		code |= RIGHT;
	else if(x < xmin)
		code |= LEFT;
	return code;
}

void cohenSutherlandLineClipAndDraw(double x0, double y0, double x1, double y1, int color)
{
	outcode outcode0, outcode1, outcodeOut;
	int accept = 0, done = 0;

	outcode0 = computeOutcode(x0,y0);
	outcode1 = computeOutcode(x1,y1);

	double slope = (y1 - y0) / (x1 - x0);

	do
	{
		if(!(outcode0|outcode1))
		{
			accept = 1;
			done = 1;
		}
		else if(outcode0 & outcode1)
			done = 1;
		else
		{
			double x,y;
			outcodeOut = outcode0 ? outcode0 : outcode1;

			/* finding intersection point using :-
				y = y0 + slope * (x - x0);
				x = x0 + (1/slope) * (y - y0); */
			if(outcodeOut & TOP)
			{
				x = x0 + (1/slope) * (ymax - y0);
				y = ymax;
			}
			else if(outcodeOut & BOTTOM)
			{
				x = x0 + (1/slope) * (ymin - y0);
				y = ymin;
			}
			else if(outcodeOut & RIGHT)
			{
				y = y0 + slope * (xmax - x0);
				x = xmax;
			}
			else if(outcodeOut & LEFT)
			{
				y = y0 + slope * (xmin - x0);
				x = xmin;
			}

			if(outcodeOut == outcode0)
			{
				x0 = x;
				y0 = y;
				outcode0 = computeOutcode(x0,y0);
			}
			else
			{
				x1 = x;
				y1 = y;
				outcode1 = computeOutcode(x1,y1);
			}
		}
	} while(done == 0);
	if(accept == 1)
	{
		setcolor(color);
		drawLine(x0,y0,x1,y1);
	}
}

int main()
{
	int gd = DETECT, gm;
	initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");

	int max_x = getmaxx();
	int max_y = getmaxy();
	int max_x_2 = max_x / 2;
	int max_y_2 = max_y / 2;
	line(max_x_2,0,max_x_2,max_y);
	line(0,max_y_2,max_x,max_y_2);

	xmin = 50;
	ymin = 50;
	xmax = 200;
	ymax = 150;

	rectangle(max_x_2 + xmin, max_y_2 - ymax, max_x_2 + xmax, max_y_2 - ymin);

	double x0 = 25, y0 = 60, x1 = 120, y1 = 170;
	drawLine(x0,y0,x1,y1);

	cohenSutherlandLineClipAndDraw(x0,y0,x1,y1,YELLOW);

	getch();
	closegraph();
	return 0;
}